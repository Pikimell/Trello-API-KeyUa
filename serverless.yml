# NOTE: update this with your service name
service: ku

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #environment:
  #  SAMPLE_ENV_VAR: ${env:SAMPLE_ENV_VAR}

functions:
  createColumn:
    handler: controllers/columnC.pushColumn
    events:
      - http:
          path: pushColumn
          method: post
          cors: true
  getColumns:
    handler: controllers/columnC.getColumns
    events:
      - http:
          path: getColumns
          method: get
          cors: true
  getColumn:
    handler: controllers/columnC.getColumn
    events:
      - http:
          path: getColumn/{idColumn}
          method: get
          cors: true
  deleteColumn:
    handler: controllers/columnC.deleteColumn
    events:
      - http:
          path: deleteColumn/{idColumn}
          method: delete
          cors: true
  updateColumn:
    handler: controllers/columnC.updateColumn
    events:
      - http:
          path: updateColumn/{idColumn}
          method: put
          cors: true




  createCard:
    handler: controllers/cardC.pushCard
    events:
      - http:
          path: pushCard
          method: post
          cors: true
  getCards:
      handler: controllers/cardC.getCards
      events:
        - http:
            path: getCards
            method: get
            cors: true
  getCard:
      handler: controllers/cardC.getCard
      events:
        - http:
            path: getCard/{idCard}
            method: get
            cors: true
  deleteCard:
      handler: controllers/cardC.deleteCard
      events:
        - http:
            path: deleteCard/{idCard}
            method: delete
            cors: true
  updateCard:
      handler: controllers/cardC.updateCard
      events:
        - http:
            path: updateCard/{idCard}
            method: put
            cors: true



  createIndexes:
    handler: controllers/columnIndexC.pushIndexes
    events:
      - http:
          path: pushIndexes
          method: post
          cors: true
  getColumnIndex:
    handler: controllers/columnIndexC.getIndexes
    events:
      - http:
          path: getColIndexes
          method: get
          cors: true
  updateColumnIndex:
    handler: controllers/columnIndexC.updateIndexes
    events:
      - http:
          path: updateIndexes/{idIndex}
          method: put
          cors: true



  createCardIndexes:
    handler: controllers/cardIndexC.pushIndexes
    events:
      - http:
          path: pushColumnIndexes
          method: post
          cors: true
  getCardsIndex:
      handler: controllers/cardIndexC.getIndexes
      events:
        - http:
            path: getCardIndexes
            method: get
            cors: true
  getIndexesForCol:
      handler: controllers/cardIndexC.getIndexesForCol
      events:
        - http:
            path: getIndexesForCol/{idColumn}
            method: get
            cors: true
  updateCardIndex:
      handler: controllers/cardIndexC.updateIndexes
      events:
        - http:
            path: updateCardsIndexes/{idIndex}
            method: put
            cors: true
  deleteCardIndex:
      handler: controllers/cardIndexC.deleteIndexCard
      events:
        - http:
            path: deleteCardIndexes/{idColumn}
            method: delete
            cors: true